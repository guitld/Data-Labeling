import React, { useState, useEffect } from 'react';
import axios from 'axios';

interface User {
  username: string;
  role: string;
}

interface LoginResponse {
  success: boolean;
  role: string;
  message: string;
}

interface Image {
  id: string;
  filename: string;
  original_name: string;
  group_id: string;
  uploaded_at: string;
  uploaded_by: string;
}

interface Group {
  id: string;
  name: string;
  description: string;
  created_at: string;
  created_by: string;
  members: string[];
}

interface TagSuggestion {
  id: string;
  image_id: string;
  tag: string;
  suggested_by: string;
  suggested_at: string;
  status: string;
  reviewed_by?: string;
  reviewed_at?: string;
}

interface ApprovedTag {
  id: string;
  image_id: string;
  tag: string;
  approved_by: string;
  approved_at: string;
  upvotes: number;
}

const App: React.FC = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');
  const [adminData, setAdminData] = useState<string>('');
  const [images, setImages] = useState<Image[]>([]);
  const [groups, setGroups] = useState<Group[]>([]);
  const [selectedImage, setSelectedImage] = useState<Image | null>(null);
  const [showModal, setShowModal] = useState(false);
  const [currentView, setCurrentView] = useState<'dashboard' | 'gallery' | 'upload' | 'groups' | 'tags'>('dashboard');
  const [selectedGroup, setSelectedGroup] = useState<string | null>(null);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [imageTags, setImageTags] = useState<{approved: ApprovedTag[], suggestions: TagSuggestion[]}>({approved: [], suggestions: []});
  const [pendingSuggestions, setPendingSuggestions] = useState<TagSuggestion[]>([]);
  const [newTag, setNewTag] = useState('');
  const [userUpvotes, setUserUpvotes] = useState<Set<string>>(new Set());

  const handleLogin = async (username: string, password: string) => {
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const response = await axios.post<LoginResponse>('/login', {
        username,
        password
      });

      if (response.data.success) {
        setUser({ username, role: response.data.role });
        setIsLoggedIn(true);
        setSuccess('Login successful!');
      } else {
        setError('Invalid credentials');
      }
    } catch (error: any) {
      setError(error.response?.data?.error || 'Login failed');
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = () => {
    setIsLoggedIn(false);
    setUser(null);
    setAdminData('');
    setError('');
    setSuccess('');
  };

  const fetchProtectedData = async () => {
    try {
      const response = await axios.get('/protected');
      setSuccess('Protected data accessed successfully!');
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to access protected data');
    }
  };

  const fetchAdminData = async () => {
    try {
      const response = await axios.get('/admin');
      setAdminData(response.data.message);
      setSuccess('Admin data accessed successfully!');
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to access admin data');
    }
  };

  const fetchImages = async () => {
    if (!user) return;
    try {
      const response = await axios.get(`/images/${user.username}`);
      setImages(response.data.images);
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to fetch images');
    }
  };

  const getImagesByGroup = (groupId: string | null) => {
    if (!groupId) return images;
    return images.filter(img => img.group_id === groupId);
  };

  const getUserGroups = () => {
    if (!user) return [];
    return groups.filter(group => group.members.includes(user.username));
  };

  const fetchGroups = async () => {
    try {
      const response = await axios.get('/groups');
      setGroups(response.data.groups);
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to fetch groups');
    }
  };

  const uploadImage = async (file: File, groupId: string) => {
    if (!user) return;
    
    const formData = new FormData();
    formData.append('image', file);
    formData.append('group_id', groupId);
    formData.append('uploaded_by', user.username);

    try {
      const response = await axios.post('/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      
      if (response.data.success) {
        setSuccess('Image uploaded successfully!');
        fetchImages(); // Refresh images
      }
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to upload image');
    }
  };

  const createGroup = async (name: string, description: string) => {
    try {
      const response = await axios.post('/groups', {
        name,
        description
      });
      
      if (response.data.success) {
        setSuccess('Group created successfully!');
        fetchGroups(); // Refresh groups
      }
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to create group');
    }
  };

  const addUserToGroup = async (groupId: string, username: string) => {
    try {
      const response = await axios.post('/groups/add-user', {
        group_id: groupId,
        username
      });
      
      if (response.data.success) {
        setSuccess('User added to group successfully!');
        fetchGroups(); // Refresh groups
      }
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to add user to group');
    }
  };

  const removeUserFromGroup = async (groupId: string, username: string) => {
    try {
      const response = await axios.post('/groups/remove-user', {
        group_id: groupId,
        username
      });
      
      if (response.data.success) {
        setSuccess('User removed from group successfully!');
        fetchGroups(); // Refresh groups
      }
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to remove user from group');
    }
  };

  const deleteImage = async (imageId: string) => {
    try {
      const response = await axios.delete(`/images/delete/${imageId}`);
      
      if (response.data.success) {
        setSuccess('Image deleted successfully!');
        fetchImages(); // Refresh images
      }
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to delete image');
    }
  };

  const openImageModal = (image: Image) => {
    const currentImages = getImagesByGroup(selectedGroup);
    const imageIndex = currentImages.findIndex(img => img.id === image.id);
    setCurrentImageIndex(imageIndex >= 0 ? imageIndex : 0);
    setSelectedImage(image);
    setShowModal(true);
    fetchImageTags(image.id);
  };

  const closeImageModal = () => {
    setSelectedImage(null);
    setShowModal(false);
    setImageTags({approved: [], suggestions: []});
    setNewTag('');
    setCurrentImageIndex(0);
  };

  const navigateImage = (direction: 'prev' | 'next') => {
    const currentImages = getImagesByGroup(selectedGroup);
    if (currentImages.length === 0) return;

    let newIndex = currentImageIndex;
    if (direction === 'prev') {
      newIndex = currentImageIndex > 0 ? currentImageIndex - 1 : currentImages.length - 1;
    } else {
      newIndex = currentImageIndex < currentImages.length - 1 ? currentImageIndex + 1 : 0;
    }

    setCurrentImageIndex(newIndex);
    const newImage = currentImages[newIndex];
    setSelectedImage(newImage);
    fetchImageTags(newImage.id);
  };

  const handleKeyDown = (event: React.KeyboardEvent) => {
    if (!showModal) return;
    
    if (event.key === 'ArrowLeft') {
      navigateImage('prev');
    } else if (event.key === 'ArrowRight') {
      navigateImage('next');
    } else if (event.key === 'Escape') {
      closeImageModal();
    }
  };

  const fetchImageTags = async (imageId: string) => {
    try {
      const response = await axios.get(`/tags/image/${imageId}`);
      console.log('Tags response for image', imageId, ':', response.data);
      console.log('Approved tags:', response.data.approved);
      console.log('Suggestions:', response.data.suggestions);
      setImageTags(response.data);
      
      // Check which tags the user has upvoted
      if (user) {
        const upvotedTags = new Set<string>();
        for (const tag of response.data.approved || []) {
          const hasUpvoted = await checkUserUpvote(tag.id);
          if (hasUpvoted) {
            upvotedTags.add(tag.id);
          }
        }
        setUserUpvotes(upvotedTags);
      }
    } catch (error: any) {
      console.error('Error fetching tags:', error);
      setError(error.response?.data?.error || 'Failed to fetch tags');
    }
  };

  const suggestTag = async (imageId: string, tag: string) => {
    if (!user || !tag.trim()) return;
    
    try {
      const response = await axios.post('/tags/suggest', {
        image_id: imageId,
        tag: tag.trim(),
        suggested_by: user.username
      });
      
      if (response.data.success) {
        setSuccess('Tag suggestion submitted!');
        fetchImageTags(imageId); // Refresh tags
        setNewTag('');
      }
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to suggest tag');
    }
  };

  const reviewTag = async (suggestionId: string, status: 'approved' | 'rejected') => {
    if (!user) return;
    
    try {
      const response = await axios.post('/tags/review', {
        suggestion_id: suggestionId,
        status,
        reviewed_by: user.username
      });
      
      if (response.data.success) {
        setSuccess(`Tag suggestion ${status}!`);
        fetchPendingSuggestions(); // Refresh pending suggestions
        if (selectedImage) {
          fetchImageTags(selectedImage.id); // Refresh current image tags
        }
      }
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to review tag');
    }
  };

  const fetchPendingSuggestions = async () => {
    try {
      const response = await axios.get('/tags/pending');
      setPendingSuggestions(response.data.suggestions);
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to fetch pending suggestions');
    }
  };

  const upvoteTag = async (tagId: string) => {
    if (!user) return;
    
    try {
      const response = await axios.post('/tags/upvote', {
        tag_id: tagId,
        user_id: user.username
      });
      
      if (response.data.success) {
        setSuccess('Tag upvoted!');
        // Add to user upvotes
        setUserUpvotes(prev => {
          const newSet = new Set(prev);
          newSet.add(tagId);
          return newSet;
        });
        // Refresh image tags to update upvote count
        if (selectedImage) {
          fetchImageTags(selectedImage.id);
        }
      }
    } catch (error: any) {
      if (error.response?.status === 400) {
        setError('You have already upvoted this tag');
      } else {
        setError(error.response?.data?.error || 'Failed to upvote tag');
      }
    }
  };

  const checkUserUpvote = async (tagId: string) => {
    if (!user) return false;
    
    try {
      const response = await axios.get(`/tags/upvote/${tagId}/${user.username}`);
      return response.data.has_upvoted;
    } catch (error: any) {
      return false;
    }
  };

  useEffect(() => {
    if (isLoggedIn && user) {
      fetchImages();
      if (user.role === 'admin') {
        fetchGroups();
        fetchPendingSuggestions();
      }
    }
  }, [isLoggedIn, user]);

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (!showModal) return;
      
      if (event.key === 'ArrowLeft') {
        navigateImage('prev');
      } else if (event.key === 'ArrowRight') {
        navigateImage('next');
      } else if (event.key === 'Escape') {
        closeImageModal();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [showModal, currentImageIndex, selectedGroup]);

  if (isLoggedIn && user) {
    return (
      <div className="app-layout">
        {/* Sidebar */}
        <div className={`sidebar ${sidebarOpen ? 'open' : 'closed'}`}>
          <div className="sidebar-header">
            <div className="logo">
              <span className="logo-icon">🖼️</span>
              {sidebarOpen && <span className="logo-text">ImageHub</span>}
            </div>
            <button 
              className="sidebar-toggle"
              onClick={() => setSidebarOpen(!sidebarOpen)}
            >
              {sidebarOpen ? '◀' : '▶'}
            </button>
          </div>

          <div className="sidebar-content">
            <div className="user-profile">
              <div className="user-avatar">
                {user.username.charAt(0).toUpperCase()}
              </div>
              {sidebarOpen && (
                <div className="user-details">
                  <div className="user-name">{user.username}</div>
                  <div className={`user-role role-${user.role}`}>
                    {user.role}
                  </div>
                </div>
              )}
            </div>

            <nav className="sidebar-nav">
              <div className="nav-section">
                {sidebarOpen && <div className="nav-section-title">Browse</div>}
                <button 
                  className={`nav-item ${currentView === 'dashboard' ? 'active' : ''}`}
                  onClick={() => setCurrentView('dashboard')}
                  title="Dashboard"
                >
                  <span className="nav-icon">📊</span>
                  {sidebarOpen && <span className="nav-label">Dashboard</span>}
                </button>
                <button 
                  className={`nav-item ${currentView === 'gallery' ? 'active' : ''}`}
                  onClick={() => {
                    setCurrentView('gallery');
                    setSelectedGroup(null);
                  }}
                  title={`All Images (${images.length})`}
                >
                  <span className="nav-icon">🖼️</span>
                  {sidebarOpen && (
                    <span className="nav-label">
                      All Images
                      <span className="nav-badge">{images.length}</span>
                    </span>
                  )}
                </button>
              </div>
              
              {user.role === 'admin' && (
                <div className="nav-section">
                  {sidebarOpen && <div className="nav-section-title">Admin Tools</div>}
                  <button 
                    className={`nav-item ${currentView === 'upload' ? 'active' : ''}`}
                    onClick={() => setCurrentView('upload')}
                    title="Upload Images"
                  >
                    <span className="nav-icon">📤</span>
                    {sidebarOpen && <span className="nav-label">Upload Images</span>}
                  </button>
                  <button 
                    className={`nav-item ${currentView === 'groups' ? 'active' : ''}`}
                    onClick={() => setCurrentView('groups')}
                    title="Manage Groups"
                  >
                    <span className="nav-icon">📁</span>
                    {sidebarOpen && <span className="nav-label">Manage Groups</span>}
                  </button>
                  <button 
                    className={`nav-item ${currentView === 'tags' ? 'active' : ''}`}
                    onClick={() => setCurrentView('tags')}
                    title={`Review Tags (${pendingSuggestions.length})`}
                  >
                    <span className="nav-icon">🏷️</span>
                    {sidebarOpen && (
                      <span className="nav-label">
                        Review Tags
                        <span className="nav-badge">{pendingSuggestions.length}</span>
                      </span>
                    )}
                  </button>
                </div>
              )}
            </nav>
          </div>

          <div className="sidebar-footer">
            <button 
              className="logout-btn"
              onClick={handleLogout}
              title="Logout"
            >
              <span className="nav-icon">🚪</span>
              {sidebarOpen && <span className="nav-label">Logout</span>}
            </button>
          </div>
        </div>

        {/* Main Content */}
        <div className={`main-content ${sidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>
          <div className="content-header">
            <button 
              className="mobile-menu-toggle"
              onClick={() => setSidebarOpen(!sidebarOpen)}
            >
              ☰
            </button>
            <h1 className="page-title">
              {currentView === 'dashboard' && 'Dashboard'}
              {currentView === 'gallery' && 'Image Gallery'}
              {currentView === 'upload' && 'Upload Images'}
              {currentView === 'groups' && 'Manage Groups'}
              {currentView === 'tags' && 'Review Tags'}
            </h1>
          </div>

          <div className="content-body">
            {currentView === 'dashboard' && (
              <>
                <p>You are successfully logged in as a <strong>{user.role}</strong>.</p>
                
                {user.role === 'admin' && (
                  <div className="admin-panel">
                    <h3>Admin Panel</h3>
                    <p>This is a special area only accessible to administrators.</p>
                    <button 
                      className="protected-button" 
                      onClick={fetchAdminData}
                    >
                      Load Admin Data
                    </button>
                    {adminData && (
                      <div style={{ marginTop: '1rem', padding: '1rem', background: '#fff', borderRadius: '5px' }}>
                        <strong>Admin Data:</strong> {adminData}
                      </div>
                    )}
                  </div>
                )}

                <div className="button-group">
                  <button 
                    className="protected-button" 
                    onClick={fetchProtectedData}
                  >
                    Access Protected Data
                  </button>
                </div>
              </>
            )}

            {currentView === 'gallery' && (
              <GalleryView 
                images={images} 
                onImageClick={openImageModal}
                user={user}
                groups={getUserGroups()}
                selectedGroup={selectedGroup}
                onGroupSelect={setSelectedGroup}
                onDeleteImage={deleteImage}
              />
            )}

            {currentView === 'upload' && user.role === 'admin' && (
              <UploadView 
                groups={groups}
                onUpload={uploadImage}
                onDeleteImage={deleteImage}
              />
            )}

            {currentView === 'groups' && user.role === 'admin' && (
              <GroupsView 
                groups={groups}
                onAddUser={addUserToGroup}
                onRemoveUser={removeUserFromGroup}
                onCreateGroup={createGroup}
                images={images}
                tags={imageTags}
                onRefreshImages={fetchImages}
                onDeleteImage={deleteImage}
              />
            )}

            {currentView === 'tags' && user.role === 'admin' && (
              <TagsView 
                suggestions={pendingSuggestions}
                onReview={reviewTag}
                images={images}
                onImageClick={openImageModal}
                groups={groups}
              />
            )}
          </div>

          {error && <div className="error-message">{error}</div>}
          {success && <div className="success-message">{success}</div>}

        {showModal && selectedImage && (
          <ImageModal 
            image={selectedImage} 
            onClose={closeImageModal}
            tags={imageTags}
            newTag={newTag}
            setNewTag={setNewTag}
            onSuggestTag={suggestTag}
            onReviewTag={reviewTag}
            onUpvote={upvoteTag}
            user={user}
            groups={groups}
            currentIndex={currentImageIndex}
            totalImages={getImagesByGroup(selectedGroup).length}
            onNavigate={navigateImage}
            userUpvotes={userUpvotes}
          />
        )}
        </div>
      </div>
    );
  }

  return (
    <LoginForm onLogin={handleLogin} loading={loading} error={error} success={success} />
  );
};

interface LoginFormProps {
  onLogin: (username: string, password: string) => void;
  loading: boolean;
  error: string;
  success: string;
}

const LoginForm: React.FC<LoginFormProps> = ({ onLogin, loading, error, success }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onLogin(username, password);
  };

  return (
    <div className="login-container">
      <h1 className="login-title">Login</h1>
      
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label className="form-label" htmlFor="username">
            Username
          </label>
          <input
            type="text"
            id="username"
            className="form-input"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            placeholder="Enter username"
            required
          />
        </div>

        <div className="form-group">
          <label className="form-label" htmlFor="password">
            Password
          </label>
          <input
            type="password"
            id="password"
            className="form-input"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Enter password"
            required
          />
        </div>

        <button 
          type="submit" 
          className="login-button"
          disabled={loading}
        >
          {loading ? 'Logging in...' : 'Login'}
        </button>
      </form>

      <div style={{ marginTop: '1.5rem', textAlign: 'center', color: '#666' }}>
        <p><strong>Test Accounts:</strong></p>
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem', marginTop: '1rem' }}>
          <div style={{ background: '#f8f9fa', padding: '1rem', borderRadius: '8px' }}>
            <p><strong>Admin</strong></p>
            <p>Username: <code>admin</code></p>
            <p>Password: <code>admin123</code></p>
          </div>
          <div style={{ background: '#f8f9fa', padding: '1rem', borderRadius: '8px' }}>
            <p><strong>Users</strong></p>
            <p>alice / alice123</p>
            <p>bob / bob123</p>
            <p>charlie / charlie123</p>
            <p>diana / diana123</p>
            <p>user / user123</p>
          </div>
        </div>
        <p style={{ marginTop: '1rem', fontSize: '0.9rem', color: '#888' }}>
          Data loaded from data.json: 3 groups, 4 images, and sample tags with upvotes!
        </p>
      </div>

      {error && <div className="error-message">{error}</div>}
      {success && <div className="success-message">{success}</div>}
    </div>
  );
};

// Gallery View Component
const GalleryView: React.FC<{
  images: Image[];
  onImageClick: (image: Image) => void;
  user: User;
  groups: Group[];
  selectedGroup: string | null;
  onGroupSelect: (groupId: string | null) => void;
  onDeleteImage: (imageId: string) => void;
}> = ({ images, onImageClick, user, groups, selectedGroup, onGroupSelect, onDeleteImage }) => {
  const getImagesByGroup = (groupId: string | null) => {
    if (!groupId) return images;
    return images.filter(img => img.group_id === groupId);
  };

  const currentImages = getImagesByGroup(selectedGroup);

  if (groups.length === 0) {
    return (
      <div className="empty-state">
        <h3>No Groups Available</h3>
        <p>You don't have access to any image groups yet. Contact an admin to be added to a group.</p>
      </div>
    );
  }

  return (
    <div className="gallery">
      <div className="gallery-header">
        <h2>Image Gallery</h2>
        <div className="group-selector">
          <button 
            className={`group-folder ${selectedGroup === null ? 'active' : ''}`}
            onClick={() => onGroupSelect(null)}
          >
            📁 All Groups ({images.length})
          </button>
          {groups.map((group) => {
            const groupImages = getImagesByGroup(group.id);
            return (
              <button 
                key={group.id}
                className={`group-folder ${selectedGroup === group.id ? 'active' : ''}`}
                onClick={() => onGroupSelect(group.id)}
              >
                📁 {group.name} ({groupImages.length})
              </button>
            );
          })}
        </div>
      </div>

      {currentImages.length === 0 ? (
        <div className="empty-state">
          <h3>No Images in This Group</h3>
          <p>This group doesn't have any images yet.</p>
        </div>
      ) : (
        <div className="image-grid">
          {currentImages.map((image) => (
            <div key={image.id} className="image-item">
              <div className="image-container" onClick={() => onImageClick(image)}>
              <img 
                src={`/uploads/${image.filename}`} 
                alt={image.original_name}
                className="gallery-image"
              />
                <ImageMenu
                  image={image}
                  onDelete={onDeleteImage}
                />
              </div>
              <div className="image-info">
                <p className="image-name">{image.original_name}</p>
                <p className="image-date">{new Date(image.uploaded_at).toLocaleDateString()}</p>
                <p className="image-group">{groups.find(g => g.id === image.group_id)?.name}</p>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

// Upload View Component
const UploadView: React.FC<{
  groups: Group[];
  onUpload: (file: File, groupId: string) => void;
  onDeleteImage: (imageId: string) => void;
}> = ({ groups, onUpload, onDeleteImage }) => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [selectedGroup, setSelectedGroup] = useState<string>('');

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setSelectedFile(e.target.files[0]);
    }
  };

  const handleUpload = () => {
    if (selectedFile && selectedGroup) {
      onUpload(selectedFile, selectedGroup);
      setSelectedFile(null);
      setSelectedGroup('');
    }
  };


  return (
    <div className="upload-view">
      <h2>Upload Images</h2>
      
      <div className="upload-section">
        <h3>Upload to Group</h3>
        <div className="form-group">
          <label className="form-label">Select Group</label>
          <select 
            className="form-input"
            value={selectedGroup}
            onChange={(e) => setSelectedGroup(e.target.value)}
          >
            <option value="">Choose a group...</option>
            {groups.map((group) => (
              <option key={group.id} value={group.id}>
                {group.name} - {group.description}
              </option>
            ))}
          </select>
        </div>
        
        <div className="form-group">
          <label className="form-label">Select Image</label>
          <input
            type="file"
            accept="image/*"
            onChange={handleFileChange}
            className="form-input"
          />
        </div>
        
        <button 
          className="login-button"
          onClick={handleUpload}
          disabled={!selectedFile || !selectedGroup}
        >
          Upload Image
        </button>
      </div>

    </div>
  );
};

// Image Menu Component
const ImageMenu: React.FC<{
  image: Image;
  onDelete: (imageId: string) => void;
}> = ({ image, onDelete }) => {
  const [showMenu, setShowMenu] = useState(false);
  const [showConfirm, setShowConfirm] = useState(false);

  const handleDelete = () => {
    onDelete(image.id);
    setShowConfirm(false);
    setShowMenu(false);
  };

  return (
    <div className="image-menu-container">
        <button 
        className="image-menu-button"
        onClick={(e) => {
          e.stopPropagation();
          setShowMenu(!showMenu);
        }}
        onBlur={() => setTimeout(() => setShowMenu(false), 200)}
      >
        ⋯
      </button>
      
      {showMenu && (
        <div className="image-menu-dropdown" onClick={(e) => e.stopPropagation()}>
          <button
            className="image-menu-item delete"
            onClick={(e) => {
              e.stopPropagation();
              setShowConfirm(true);
            }}
          >
            🗑️ Delete
          </button>
        </div>
      )}
      
      {showConfirm && (
        <div className="image-delete-confirm" onClick={(e) => e.stopPropagation()}>
          <div className="confirm-content" onClick={(e) => e.stopPropagation()}>
            <p>Delete this image?</p>
            <div className="confirm-buttons">
              <button
                className="confirm-button cancel"
                onClick={(e) => {
                  e.stopPropagation();
                  setShowConfirm(false);
                }}
              >
                Cancel
              </button>
              <button
                className="confirm-button delete"
                onClick={(e) => {
                  e.stopPropagation();
                  handleDelete();
                }}
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// Groups View Component
const GroupsView: React.FC<{
  groups: Group[];
  onAddUser: (groupId: string, username: string) => void;
  onRemoveUser: (groupId: string, username: string) => void;
  onCreateGroup: (name: string, description: string) => void;
  images: Image[];
  tags: {approved: ApprovedTag[], suggestions: TagSuggestion[]};
  onRefreshImages: () => void;
  onDeleteImage: (imageId: string) => void;
}> = ({ groups, onAddUser, onRemoveUser, onCreateGroup, images, tags, onRefreshImages, onDeleteImage }) => {
  const [allApprovedTags, setAllApprovedTags] = useState<ApprovedTag[]>([]);
  const [selectedGroup, setSelectedGroup] = useState<string>('');
  const [username, setUsername] = useState('');
  const [showCreateGroup, setShowCreateGroup] = useState(false);
  const [newGroupName, setNewGroupName] = useState('');
  const [newGroupDesc, setNewGroupDesc] = useState('');
  const [selectedGroupDetails, setSelectedGroupDetails] = useState<Group | null>(null);
  const [showGroupView, setShowGroupView] = useState(false);
  const [showAllTags, setShowAllTags] = useState(false);
  const [modalUsername, setModalUsername] = useState('');
  const [showUserDropdown, setShowUserDropdown] = useState(false);
  const [userSearchTerm, setUserSearchTerm] = useState('');
  const [availableUsers, setAvailableUsers] = useState<string[]>([]);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [isUploading, setIsUploading] = useState(false);
  const [pendingChanges, setPendingChanges] = useState(false);
  const [pendingMembers, setPendingMembers] = useState<string[]>([]);
  const [pendingFile, setPendingFile] = useState<File | null>(null);

  // Load all approved tags when component mounts
  React.useEffect(() => {
    const loadAllApprovedTags = async () => {
      try {
        const response = await axios.get('/tags/pending');
        // Get all approved tags from all images
        const allTags: ApprovedTag[] = [];
        for (const image of images) {
          try {
            const tagResponse = await axios.get(`/tags/image/${image.id}`);
            if (tagResponse.data.approved) {
              allTags.push(...tagResponse.data.approved);
            }
          } catch (error) {
            console.log(`No tags for image ${image.id}`);
          }
        }
        setAllApprovedTags(allTags);
      } catch (error) {
        console.error('Error loading approved tags:', error);
      }
    };
    
    loadAllApprovedTags();
  }, [images]);

  // Load available users when component mounts
  React.useEffect(() => {
    const loadAvailableUsers = async () => {
      try {
        const response = await axios.get('/users');
        setAvailableUsers(response.data);
      } catch (error) {
        console.error('Error loading users:', error);
      }
    };

    loadAvailableUsers();
  }, []);

  const handleAddUser = () => {
    if (selectedGroup && username.trim()) {
      onAddUser(selectedGroup, username.trim());
      setUsername('');
    }
  };


  const handleGroupClick = (group: Group) => {
    setSelectedGroupDetails(group);
    setShowGroupView(true);
    setShowAllTags(false);
    setModalUsername('');
    setShowUserDropdown(false);
    setUserSearchTerm('');
    setSelectedFile(null);
    setUploadProgress(0);
    setIsUploading(false);
    setPendingChanges(false);
    setPendingMembers(group.members);
    setPendingFile(null);
  };

  const handleBackToGroups = () => {
    setShowGroupView(false);
    setSelectedGroupDetails(null);
    setPendingMembers([]);
    setPendingFile(null);
    setPendingChanges(false);
    setShowAllTags(false);
    setUserSearchTerm('');
    setShowUserDropdown(false);
  };

  const handleAddUserToModal = () => {
    if (modalUsername.trim() && selectedGroupDetails) {
      onAddUser(selectedGroupDetails.id, modalUsername.trim());
      setModalUsername('');
      // Update the selected group details to reflect the new member
      setSelectedGroupDetails({
        ...selectedGroupDetails,
        members: [...selectedGroupDetails.members, modalUsername.trim()]
      });
    }
  };

  const handleToggleUser = (username: string) => {
    if (!selectedGroupDetails) return;
    
    const isMember = pendingMembers.includes(username);
    
    if (isMember) {
      // Remove user from pending members
      const updatedMembers = pendingMembers.filter(member => member !== username);
      setPendingMembers(updatedMembers);
    } else {
      // Add user to pending members
      setPendingMembers([...pendingMembers, username]);
    }
    setPendingChanges(true);
  };

  const filteredUsers = availableUsers.filter(user => 
    user.toLowerCase().includes(userSearchTerm.toLowerCase())
  );

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setPendingFile(file);
      setPendingChanges(true);
    }
  };

  const handleUploadImage = async () => {
    if (!pendingFile || !selectedGroupDetails) return;

    setIsUploading(true);
    setUploadProgress(0);

    const formData = new FormData();
    formData.append('image', pendingFile);
    formData.append('group_id', selectedGroupDetails.id);
    formData.append('uploaded_by', 'admin'); // You might want to get this from user context

    try {
      const response = await axios.post('/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        onUploadProgress: (progressEvent) => {
          if (progressEvent.total) {
            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
            setUploadProgress(progress);
          }
        },
      });

      if (response.status === 200) {
        // Reset file selection and progress
        setPendingFile(null);
        setUploadProgress(0);
        setPendingChanges(false);
        
        // Refresh the images list
        onRefreshImages();
        console.log('Image uploaded successfully');
      }
    } catch (error) {
      console.error('Error uploading image:', error);
    } finally {
      setIsUploading(false);
    }
  };

  const handleSaveChanges = async () => {
    if (!selectedGroupDetails) return;

    try {
      // Apply member changes
      const currentMembers = selectedGroupDetails.members;
      const membersToAdd = pendingMembers.filter(member => !currentMembers.includes(member));
      const membersToRemove = currentMembers.filter(member => !pendingMembers.includes(member));

      // Add new members
      for (const member of membersToAdd) {
        await onAddUser(selectedGroupDetails.id, member);
      }

      // Remove members
      for (const member of membersToRemove) {
        await onRemoveUser(selectedGroupDetails.id, member);
      }

      // Update the selected group details with new members
      setSelectedGroupDetails({
        ...selectedGroupDetails,
        members: pendingMembers
      });

      // Upload pending file if exists
      if (pendingFile) {
        await handleUploadImage();
      }

      // Reset all pending states
      setPendingChanges(false);
      setPendingMembers(selectedGroupDetails.members);
      setPendingFile(null);
      
      console.log('All changes saved successfully');
    } catch (error) {
      console.error('Error saving changes:', error);
    }
  };

  const getGroupImages = (groupId: string) => {
    return images.filter(img => img.group_id === groupId);
  };

  const getGroupTags = (groupId: string) => {
    const groupImages = getGroupImages(groupId);
    const imageIds = groupImages.map(img => img.id);
    return allApprovedTags.filter(tag => imageIds.includes(tag.image_id));
  };

  return (
    <div className="groups-view">
        <div className="groups-header">
          <h2>Manage Groups</h2>
          <button 
            className="login-button"
            onClick={() => setShowCreateGroup(!showCreateGroup)}
          >
            {showCreateGroup ? 'Cancel' : 'Create New Group'}
          </button>
        </div>
          
        {showCreateGroup && (
          <div className="create-group-section">
            <h3>Create New Group</h3>
            <div className="create-group-form">
              <div className="form-group">
                <label className="form-label">Group Name</label>
                <input
                  type="text"
                  className="form-input"
                  value={newGroupName}
                  onChange={(e) => setNewGroupName(e.target.value)}
                  placeholder="Enter group name"
                />
              </div>
              <div className="form-group">
                <label className="form-label">Description</label>
                <input
                  type="text"
                  className="form-input"
                  value={newGroupDesc}
                  onChange={(e) => setNewGroupDesc(e.target.value)}
                  placeholder="Enter group description"
                />
              </div>
              <button 
                className="login-button"
                onClick={() => {
                  if (newGroupName.trim()) {
                    onCreateGroup(newGroupName, newGroupDesc);
                    setNewGroupName('');
                    setNewGroupDesc('');
                    setShowCreateGroup(false);
                  }
                }}
                disabled={!newGroupName.trim()}
              >
                Create Group
              </button>
            </div>
          </div>
        )}

        <div className="groups-grid">
          {groups.map((group) => {
            const groupImages = getGroupImages(group.id);
            const groupTags = getGroupTags(group.id);
            return (
              <div 
                key={group.id} 
                className="group-card-clickable"
                onClick={() => handleGroupClick(group)}
              >
                <div className="group-card-header">
                  <h3>{group.name}</h3>
                  <div className="group-stats">
                    <span className="stat-item">
                      👥 {group.members.length} members
                    </span>
                    <span className="stat-item">
                      🖼️ {groupImages.length} images
                    </span>
                    <span className="stat-item">
                      🏷️ {groupTags.length} tags
                    </span>
                  </div>
                </div>
                <p className="group-description">{group.description}</p>
                <div className="group-members-preview">
                  <strong>Members:</strong> {group.members.slice(0, 3).join(', ')}
                  {group.members.length > 3 && ` +${group.members.length - 3} more`}
                </div>
              </div>
            );
          })}
        </div>

        <div className="add-user-section">
          <h3>Add User to Group</h3>
          <div className="form-group">
            <label className="form-label">Select Group</label>
            <select 
              className="form-input"
              value={selectedGroup}
              onChange={(e) => setSelectedGroup(e.target.value)}
            >
              <option value="">Choose a group...</option>
              {groups.map((group) => (
                <option key={group.id} value={group.id}>
                  {group.name}
                </option>
              ))}
            </select>
          </div>
          
          <div className="form-group">
            <label className="form-label">Username</label>
            <input
              type="text"
              className="form-input"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              placeholder="Enter username"
            />
          </div>
          
          <button 
            className="login-button"
            onClick={handleAddUser}
            disabled={!selectedGroup || !username.trim()}
          >
            Add User to Group
          </button>
        </div>
      </div>
    </div>
  );
};

// Group Detail View Component
const GroupDetailView: React.FC<{
  selectedGroupDetails: Group;
  pendingMembers: string[];
  showUserDropdown: boolean;
  userSearchTerm: string;
  filteredUsers: string[];
  showAllTags: boolean;
  pendingFile: File | null;
  isUploading: boolean;
  uploadProgress: number;
  pendingChanges: boolean;
  onBackToGroups: () => void;
  onToggleUser: (user: string) => void;
  onSetUserSearchTerm: (term: string) => void;
  onSetShowUserDropdown: (show: boolean) => void;
  onSetShowAllTags: (show: boolean) => void;
  onFileSelect: (file: File | null) => void;
  onSaveChanges: () => void;
  onDeleteImage: (imageId: string) => void;
  getGroupTags: (groupId: string) => any[];
  getGroupImages: (groupId: string) => any[];
}> = ({
  selectedGroupDetails,
  pendingMembers,
  showUserDropdown,
  userSearchTerm,
  filteredUsers,
  showAllTags,
  pendingFile,
  isUploading,
  uploadProgress,
  pendingChanges,
  onBackToGroups,
  onToggleUser,
  onSetUserSearchTerm,
  onSetShowUserDropdown,
  onSetShowAllTags,
  onFileSelect,
  onSaveChanges,
  onDeleteImage,
  getGroupTags,
  getGroupImages
}) => {
  return (
    <div className="group-detail-view">
      <div className="group-detail-header">
        <button className="back-button" onClick={onBackToGroups}>
          ← Back to Groups
        </button>
        <div className="group-detail-title">
          <h1>{selectedGroupDetails.name}</h1>
          <p className="group-detail-description">{selectedGroupDetails.description}</p>
        </div>
      </div>
      
      <div className="group-detail-content">
        <div className="group-detail-layout">
          {/* Left Sidebar - Members and Tags */}
          <div className="group-detail-sidebar">
            <div className="group-detail-section">
              <h3>👥 Members ({pendingMembers.length})</h3>
              <div className="members-list">
                {pendingMembers.map((member, index) => (
                  <span key={index} className="member-tag">{member}</span>
                ))}
                <div className="add-member-button-container">
                  <button
                    className="add-member-plus-button"
                    onClick={() => onSetShowUserDropdown(!showUserDropdown)}
                    title="Add/Remove members"
                  >
                    +
                  </button>
                </div>
              </div>
              
              {showUserDropdown && (
                <div className="user-dropdown">
                  <div className="user-search-container">
                    <input
                      type="text"
                      placeholder="Search users..."
                      value={userSearchTerm}
                      onChange={(e) => onSetUserSearchTerm(e.target.value)}
                      className="user-search-input"
                    />
                  </div>
                  <div className="user-list">
                    {filteredUsers.map((user) => {
                      const isMember = pendingMembers.includes(user);
                      return (
                        <div key={user} className="user-item">
                          <label className="user-checkbox-label">
                            <input
                              type="checkbox"
                              checked={isMember}
                              onChange={() => onToggleUser(user)}
                              className="user-checkbox"
                            />
                            <span className={`user-name ${isMember ? 'member' : ''}`}>
                              {user}
                            </span>
                          </label>
                        </div>
                      );
                    })}
                    {filteredUsers.length === 0 && (
                      <div className="no-users-message">
                        No users found
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>

            <div className="group-detail-section">
              <h3>🏷️ Popular Tags ({getGroupTags(selectedGroupDetails.id).length})</h3>
              <div className="group-tags-list">
                {getGroupTags(selectedGroupDetails.id)
                  .sort((a, b) => b.upvotes - a.upvotes)
                  .slice(0, showAllTags ? undefined : 10)
                  .map((tag) => (
                    <span key={tag.id} className="group-tag-item">
                      {tag.tag} ({tag.upvotes})
                    </span>
                  ))}
                {!showAllTags && getGroupTags(selectedGroupDetails.id).length > 10 && (
                  <button 
                    className="group-tag-more-button"
                    onClick={() => onSetShowAllTags(true)}
                  >
                    +{getGroupTags(selectedGroupDetails.id).length - 10} more
                  </button>
                )}
                {showAllTags && getGroupTags(selectedGroupDetails.id).length > 10 && (
                  <button 
                    className="group-tag-less-button"
                    onClick={() => onSetShowAllTags(false)}
                  >
                    Show less
                  </button>
                )}
              </div>
            </div>
          </div>

          {/* Right Side - Images */}
          <div className="group-detail-main">
            <div className="group-detail-section">
              <div className="images-header">
                <h3>🖼️ Images ({getGroupImages(selectedGroupDetails.id).length})</h3>
                
                {/* Upload Section */}
                <div className="upload-section">
                  <div className="file-input-container">
                    <input
                      type="file"
                      id="group-image-upload"
                      accept="image/*"
                      onChange={(e) => onFileSelect(e.target.files?.[0] || null)}
                      className="file-input"
                    />
                    <label htmlFor="group-image-upload" className="file-input-label">
                      {pendingFile ? pendingFile.name : 'Choose image to upload'}
                    </label>
                  </div>
                  
                  {pendingFile && (
                    <div className="upload-pending">
                      <span className="pending-file-name">📁 {pendingFile.name}</span>
                      <span className="pending-file-size">
                        ({(pendingFile.size / 1024 / 1024).toFixed(2)} MB)
                      </span>
                      {isUploading && (
                        <div className="upload-progress">
                          <div className="progress-bar">
                            <div 
                              className="progress-fill" 
                              style={{ width: `${uploadProgress}%` }}
                            ></div>
                          </div>
                          <span className="progress-text">{uploadProgress}%</span>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>

              {/* Images Grid */}
              <div className="group-images-grid">
                {getGroupImages(selectedGroupDetails.id).map((image) => (
                  <div key={image.id} className="group-image-item">
                    <div className="image-container">
                      <img
                        src={`/uploads/${image.filename}`}
                        alt={image.original_name}
                        className="group-image-preview"
                      />
                      <ImageMenu
                        image={image}
                        onDelete={onDeleteImage}
                      />
                    </div>
                    <p className="group-image-name">{image.original_name}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
        
        {/* Save Changes Button */}
        {pendingChanges && (
          <div className="group-detail-save-section">
            <button
              className="group-detail-save-button"
              onClick={onSaveChanges}
              disabled={isUploading}
            >
              {isUploading ? 'Saving...' : 'Save Changes'}
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

// Main App Component
const App: React.FC = () => {
  // State management
  const [user, setUser] = useState<User | null>(null);
  const [currentView, setCurrentView] = useState<string>('login');
  const [images, setImages] = useState<Image[]>([]);
  const [groups, setGroups] = useState<Group[]>([]);
  const [imageTags, setImageTags] = useState<{approved: ApprovedTag[], suggestions: TagSuggestion[]}>({approved: [], suggestions: []});
  const [selectedImage, setSelectedImage] = useState<Image | null>(null);
  const [showImageModal, setShowImageModal] = useState(false);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');
  const [newTag, setNewTag] = useState('');
  const [currentIndex, setCurrentIndex] = useState(0);
  const [userUpvotes, setUserUpvotes] = useState<Set<string>>(new Set());
  const [selectedGroup, setSelectedGroup] = useState<string>('');
  const [username, setUsername] = useState<string>('');
  const [showGroupView, setShowGroupView] = useState(false);
  const [selectedGroupDetails, setSelectedGroupDetails] = useState<Group | null>(null);
  const [showAllTags, setShowAllTags] = useState(false);
  const [modalUsername, setModalUsername] = useState('');
  const [showUserDropdown, setShowUserDropdown] = useState(false);
  const [userSearchTerm, setUserSearchTerm] = useState('');
  const [filteredUsers, setFilteredUsers] = useState<string[]>([]);
  const [pendingMembers, setPendingMembers] = useState<string[]>([]);
  const [pendingFile, setPendingFile] = useState<File | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [pendingChanges, setPendingChanges] = useState(false);
  const [showCreateGroup, setShowCreateGroup] = useState(false);
  const [newGroupName, setNewGroupName] = useState('');
  const [newGroupDesc, setNewGroupDesc] = useState('');

  // Load data on component mount
  useEffect(() => {
    fetchImages();
    fetchGroups();
    fetchTags();
    fetchUsers();
  }, []);

  // Filter users based on search term
  useEffect(() => {
    if (userSearchTerm) {
      const filtered = filteredUsers.filter(user => 
        user.toLowerCase().includes(userSearchTerm.toLowerCase())
      );
      setFilteredUsers(filtered);
    } else {
      setFilteredUsers([]);
    }
  }, [userSearchTerm]);

  // Fetch images from backend
  const fetchImages = async () => {
    try {
      const response = await axios.get('/images');
      setImages(response.data);
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to fetch images');
    }
  };

  // Fetch groups from backend
  const fetchGroups = async () => {
    try {
      const response = await axios.get('/groups');
      setGroups(response.data);
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to fetch groups');
    }
  };

  // Fetch tags from backend
  const fetchTags = async () => {
    try {
      const response = await axios.get('/tags');
      setImageTags(response.data);
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to fetch tags');
    }
  };

  // Fetch users from backend
  const fetchUsers = async () => {
    try {
      const response = await axios.get('/users');
      setFilteredUsers(response.data);
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to fetch users');
    }
  };

  // Login function
  const handleLogin = async (username: string, password: string) => {
    try {
      const response = await axios.post('/login', { username, password });
      setUser(response.data);
      setCurrentView('dashboard');
      setError('');
    } catch (error: any) {
      setError(error.response?.data?.error || 'Login failed');
    }
  };

  // Logout function
  const handleLogout = () => {
    setUser(null);
    setCurrentView('login');
    setSelectedImage(null);
    setShowImageModal(false);
    setShowGroupView(false);
    setSelectedGroupDetails(null);
  };

  // Upload image function
  const handleUpload = async (file: File, groupId: string) => {
    const formData = new FormData();
    formData.append('image', file);
    formData.append('group_id', groupId);

    try {
      const response = await axios.post('/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      
      if (response.data.success) {
        setSuccess('Image uploaded successfully!');
        fetchImages(); // Refresh images
        fetchTags(); // Refresh tags
      }
    } catch (error: any) {
      setError(error.response?.data?.error || 'Upload failed');
    }
  };

  // Delete image function
  const deleteImage = async (imageId: string) => {
    try {
      const response = await axios.delete(`/images/delete/${imageId}`);
      
      if (response.data.success) {
        setSuccess('Image deleted successfully!');
        fetchImages(); // Refresh images
        fetchTags(); // Refresh tags
      }
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to delete image');
    }
  };

  // Create group function
  const createGroup = async (name: string, description: string) => {
    try {
      const response = await axios.post('/groups', { name, description });
      
      if (response.data.success) {
        setSuccess('Group created successfully!');
        fetchGroups(); // Refresh groups
        setNewGroupName('');
        setNewGroupDesc('');
        setShowCreateGroup(false);
      }
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to create group');
    }
  };

  // Add user to group function
  const addUserToGroup = async (groupId: string, username: string) => {
    try {
      const response = await axios.post('/groups/add-user', { group_id: groupId, username });
      
      if (response.data.success) {
        setSuccess('User added to group successfully!');
        fetchGroups(); // Refresh groups
        setUsername('');
      }
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to add user to group');
    }
  };

  // Remove user from group function
  const removeUserFromGroup = async (groupId: string, username: string) => {
    try {
      const response = await axios.post('/groups/remove-user', { group_id: groupId, username });
      
      if (response.data.success) {
        setSuccess('User removed from group successfully!');
        fetchGroups(); // Refresh groups
      }
    } catch (error: any) {
      setError(error.response?.data?.error || 'Failed to remove user from group');
    }
  };

  // Handle group click
  const handleGroupClick = (group: Group) => {
    setSelectedGroupDetails(group);
    setShowGroupView(true);
    setShowAllTags(false);
    setModalUsername('');
    setShowUserDropdown(false);
    setUserSearchTerm('');
    setSelectedFile(null);
    setUploadProgress(0);
    setIsUploading(false);
    setPendingChanges(false);
    setPendingMembers(group.members);
    setPendingFile(null);
  };

  // Handle back to groups
  const handleBackToGroups = () => {
    setShowGroupView(false);
    setSelectedGroupDetails(null);
    setPendingMembers([]);
    setPendingFile(null);
    setPendingChanges(false);
  };

  // Handle toggle user
  const handleToggleUser = (user: string) => {
    setPendingMembers(prev => {
      if (prev.includes(user)) {
        return prev.filter(member => member !== user);
      } else {
        return [...prev, user];
      }
    });
    setPendingChanges(true);
  };

  // Handle save changes
  const handleSaveChanges = async () => {
    if (selectedGroupDetails) {
      // Update group members
      const currentMembers = selectedGroupDetails.members;
      const membersToAdd = pendingMembers.filter(member => !currentMembers.includes(member));
      const membersToRemove = currentMembers.filter(member => !pendingMembers.includes(member));

      // Add new members
      for (const member of membersToAdd) {
        await addUserToGroup(selectedGroupDetails.id, member);
      }

      // Remove members
      for (const member of membersToRemove) {
        await removeUserFromGroup(selectedGroupDetails.id, member);
      }

      // Upload file if pending
      if (pendingFile) {
        await handleUpload(pendingFile, selectedGroupDetails.id);
        setPendingFile(null);
      }

      setPendingChanges(false);
      setShowGroupView(false);
      setSelectedGroupDetails(null);
      fetchGroups(); // Refresh groups
    }
  };

  // Get group images
  const getGroupImages = (groupId: string) => {
    return images.filter(img => img.group_id === groupId);
  };

  // Get group tags
  const getGroupTags = (groupId: string) => {
    const groupImages = getGroupImages(groupId);
    const imageIds = groupImages.map(img => img.id);
    return imageTags.approved.filter(tag => imageIds.includes(tag.image_id));
  };

  return (
    <div className="app">
      {!user ? (
        <LoginView onLogin={handleLogin} error={error} />
      ) : (
        <div className="main-content">
          <Sidebar 
            currentView={currentView} 
            onViewChange={setCurrentView} 
            onLogout={handleLogout}
            user={user}
          />
          
          <div className="content">
            <div className="content-header">
              <h1>ImageHub</h1>
              {error && <div className="error-message">{error}</div>}
              {success && <div className="success-message">{success}</div>}
            </div>

            <div className="content-body">
              {currentView === 'dashboard' && (
                <>
                  <p>You are successfully logged in as a <strong>{user.role}</strong>.</p>
                  
                  {user.role === 'admin' && (
                    <div className="admin-actions">
                      <button 
                        className="action-button"
                        onClick={() => setCurrentView('gallery')}
                      >
                        View Gallery
                      </button>
                      <button 
                        className="action-button"
                        onClick={() => setCurrentView('upload')}
                      >
                        Upload Images
                      </button>
                      <button 
                        className="action-button"
                        onClick={() => setCurrentView('groups')}
                      >
                        Manage Groups
                      </button>
                      <button 
                        className="action-button"
                        onClick={() => setCurrentView('tags')}
                      >
                        Manage Tags
                      </button>
                    </div>
                  )}
                </>
              )}

              {currentView === 'gallery' && (
                <GalleryView
                  images={images}
                  onImageClick={(image) => {
                    setSelectedImage(image);
                    setShowImageModal(true);
                  }}
                  user={user}
                  groups={groups}
                  selectedGroup={selectedGroup}
                  onGroupSelect={setSelectedGroup}
                  onDeleteImage={deleteImage}
                />
              )}

              {currentView === 'upload' && (
                <UploadView
                  groups={groups}
                  onUpload={handleUpload}
                  onDeleteImage={deleteImage}
                />
              )}

              {currentView === 'groups' && user.role === 'admin' && (
                showGroupView && selectedGroupDetails ? (
                  <GroupDetailView
                    selectedGroupDetails={selectedGroupDetails}
                    pendingMembers={pendingMembers}
                    showUserDropdown={showUserDropdown}
                    userSearchTerm={userSearchTerm}
                    filteredUsers={filteredUsers}
                    showAllTags={showAllTags}
                    pendingFile={pendingFile}
                    isUploading={isUploading}
                    uploadProgress={uploadProgress}
                    pendingChanges={pendingChanges}
                    onBackToGroups={handleBackToGroups}
                    onToggleUser={handleToggleUser}
                    onSetUserSearchTerm={setUserSearchTerm}
                    onSetShowUserDropdown={setShowUserDropdown}
                    onSetShowAllTags={setShowAllTags}
                    onFileSelect={setPendingFile}
                    onSaveChanges={handleSaveChanges}
                    onDeleteImage={deleteImage}
                    getGroupTags={getGroupTags}
                    getGroupImages={getGroupImages}
                  />
                ) : (
                  <GroupsView
                    groups={groups}
                    onAddUser={addUserToGroup}
                    onRemoveUser={removeUserFromGroup}
                    onCreateGroup={createGroup}
                    images={images}
                    tags={imageTags}
                    onRefreshImages={fetchImages}
                    onDeleteImage={deleteImage}
                  />
                )
              )}

              {currentView === 'tags' && user.role === 'admin' && (
                <TagsView
                  tags={imageTags}
                  onRefreshTags={fetchTags}
                  user={user}
                />
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default App;
                  <div className="members-list">
                    {pendingMembers.map((member, index) => (
                      <span key={index} className="member-tag">{member}</span>
                    ))}
                    <div className="add-member-button-container">
                      <button
                        className="add-member-plus-button"
                        onClick={() => setShowUserDropdown(!showUserDropdown)}
                        title="Add/Remove members"
                      >
                        +
                      </button>
                    </div>
                  </div>
                  
                  {showUserDropdown && (
                    <div className="user-dropdown">
                      <div className="user-search-container">
                        <input
                          type="text"
                          placeholder="Search users..."
                          value={userSearchTerm}
                          onChange={(e) => setUserSearchTerm(e.target.value)}
                          className="user-search-input"
                        />
                      </div>
                      <div className="user-list">
                        {filteredUsers.map((user) => {
                          const isMember = pendingMembers.includes(user);
  return (
                            <div key={user} className="user-item">
                              <label className="user-checkbox-label">
                                <input
                                  type="checkbox"
                                  checked={isMember}
                                  onChange={() => handleToggleUser(user)}
                                  className="user-checkbox"
                                />
                                <span className={`user-name ${isMember ? 'member' : ''}`}>
                                  {user}
                                </span>
                              </label>
                            </div>
                          );
                        })}
                        {filteredUsers.length === 0 && (
                          <div className="no-users-message">
                            No users found
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>

                <div className="group-detail-section">
                  <h3>🏷️ Popular Tags ({getGroupTags(selectedGroupDetails.id).length})</h3>
                  <div className="group-tags-list">
                    {getGroupTags(selectedGroupDetails.id)
                      .sort((a, b) => b.upvotes - a.upvotes)
                      .slice(0, showAllTags ? undefined : 10)
                      .map((tag) => (
                        <span key={tag.id} className="group-tag-item">
                          {tag.tag} ({tag.upvotes})
                        </span>
                      ))}
                    {!showAllTags && getGroupTags(selectedGroupDetails.id).length > 10 && (
                      <button 
                        className="group-tag-more-button"
                        onClick={() => setShowAllTags(true)}
                      >
                        +{getGroupTags(selectedGroupDetails.id).length - 10} more
                      </button>
                    )}
                    {showAllTags && getGroupTags(selectedGroupDetails.id).length > 10 && (
                      <button 
                        className="group-tag-less-button"
                        onClick={() => setShowAllTags(false)}
                      >
                        Show less
                      </button>
                    )}
                  </div>
                </div>
              </div>

              {/* Right Side - Images */}
              <div className="group-detail-main">
                <div className="group-detail-section">
                  <div className="images-header">
                    <h3>🖼️ Images ({getGroupImages(selectedGroupDetails.id).length})</h3>
                    
                    {/* Upload Section */}
                    <div className="upload-section">
                      <div className="file-input-container">
                        <input
                          type="file"
                          id="group-image-upload"
                          accept="image/*"
                          onChange={handleFileSelect}
                          className="file-input"
                        />
                        <label htmlFor="group-image-upload" className="file-input-label">
                          {pendingFile ? pendingFile.name : 'Choose image to upload'}
                        </label>
                      </div>
                      
                      {pendingFile && (
                        <div className="upload-pending">
                          <span className="pending-file-name">📁 {pendingFile.name}</span>
                          <span className="pending-file-size">
                            ({(pendingFile.size / 1024 / 1024).toFixed(2)} MB)
                          </span>
                          {isUploading && (
                            <div className="upload-progress">
                              <div className="progress-bar">
                                <div 
                                  className="progress-fill" 
                                  style={{ width: `${uploadProgress}%` }}
                                ></div>
                              </div>
                              <span className="progress-text">{uploadProgress}%</span>
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Images Grid */}
                  <div className="group-images-grid">
                    {getGroupImages(selectedGroupDetails.id).map((image) => (
                      <div key={image.id} className="group-image-item">
                        <div className="image-container">
                          <img
                            src={`/uploads/${image.filename}`}
                            alt={image.original_name}
                            className="group-image-preview"
                          />
                          <ImageMenu
                            image={image}
                            onDelete={onDeleteImage}
                          />
                        </div>
                        <p className="group-image-name">{image.original_name}</p>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
            
            {/* Save Changes Button */}
            {pendingChanges && (
              <div className="group-detail-save-section">
                <button
                  className="group-detail-save-button"
                  onClick={handleSaveChanges}
                  disabled={isUploading}
                >
                  {isUploading ? 'Saving...' : 'Save Changes'}
                </button>
              </div>
            )}
          </div>
        </div>
      ) : (
        // Groups Grid - Only show when not viewing a group
        <div className="groups-content">
          <div className="groups-header">
      <h2>Manage Groups</h2>
            <button
              className="create-group-button"
              onClick={() => setShowCreateGroup(true)}
            >
              Create New Group
            </button>
          </div>

          {showCreateGroup && (
            <div className="create-group-modal">
              <div className="create-group-content">
                <h3>Create New Group</h3>
                <div className="form-group">
                  <label>Group Name</label>
                  <input
                    type="text"
                    value={newGroupName}
                    onChange={(e) => setNewGroupName(e.target.value)}
                    placeholder="Enter group name"
                  />
                </div>
                <div className="form-group">
                  <label>Description</label>
                  <textarea
                    value={newGroupDesc}
                    onChange={(e) => setNewGroupDesc(e.target.value)}
                    placeholder="Enter group description"
                    rows={3}
                  />
                </div>
                <div className="form-actions">
                  <button
                    className="cancel-button"
                    onClick={() => {
                      setShowCreateGroup(false);
                      setNewGroupName('');
                      setNewGroupDesc('');
                    }}
                  >
                    Cancel
                  </button>
                  <button
                    className="create-button"
                    onClick={() => {
                      if (newGroupName.trim()) {
                        onCreateGroup(newGroupName, newGroupDesc);
                        setNewGroupName('');
                        setNewGroupDesc('');
                        setShowCreateGroup(false);
                      }
                    }}
                    disabled={!newGroupName.trim()}
                  >
                    Create Group
                  </button>
                </div>
              </div>
            </div>
          )}

          <div className="groups-grid">
            {groups.map((group) => {
              const groupImages = images.filter(img => img.group_id === group.id);
              const groupTags = tags.approved.filter(tag => groupImages.some(img => img.id === tag.image_id));
              
              return (
                <div
                  key={group.id}
                  className="group-card"
                  onClick={() => handleGroupClick(group)}
                >
                  <div className="group-card-header">
            <h3>{group.name}</h3>
                    <div className="group-stats">
                      <span className="stat-item">
                        👥 {group.members.length} members
                      </span>
                      <span className="stat-item">
                        🖼️ {groupImages.length} images
                      </span>
                      <span className="stat-item">
                        🏷️ {groupTags.length} tags
                      </span>
          </div>
                  </div>
                  <p className="group-description">{group.description}</p>
                  <div className="group-members">
                    {group.members.slice(0, 3).map((member, index) => (
                      <span key={index} className="member-tag">{member}</span>
                    ))}
                    {group.members.length > 3 && (
                      <span className="member-more">+{group.members.length - 3} more</span>
                    )}
                  </div>
                </div>
              );
            })}
      </div>

      <div className="add-user-section">
        <h3>Add User to Group</h3>
            <div className="form-row">
        <div className="form-group">
                <label>Select Group</label>
          <select 
            value={selectedGroup}
            onChange={(e) => setSelectedGroup(e.target.value)}
          >
            <option value="">Choose a group...</option>
            {groups.map((group) => (
              <option key={group.id} value={group.id}>
                {group.name}
              </option>
            ))}
          </select>
        </div>
        <div className="form-group">
                <label>Username</label>
          <input
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            placeholder="Enter username"
          />
        </div>
            </div>
        <button 
              className="add-user-button"
          onClick={handleAddUser}
          disabled={!selectedGroup || !username.trim()}
        >
          Add User to Group
        </button>
      </div>
        </div>
      )}
    </>
  );
};

// Image Modal Component
const ImageModal: React.FC<{
  image: Image;
  onClose: () => void;
  tags: {approved: ApprovedTag[], suggestions: TagSuggestion[]};
  newTag: string;
  setNewTag: (tag: string) => void;
  onSuggestTag: (imageId: string, tag: string) => void;
  onReviewTag: (suggestionId: string, status: 'approved' | 'rejected') => void;
  onUpvote: (tagId: string) => void;
  user: User;
  groups: Group[];
  currentIndex: number;
  totalImages: number;
  onNavigate: (direction: 'prev' | 'next') => void;
  userUpvotes: Set<string>;
}> = ({ image, onClose, tags, newTag, setNewTag, onSuggestTag, onReviewTag, onUpvote, user, groups, currentIndex, totalImages, onNavigate, userUpvotes }) => {
  const handleSuggestTag = () => {
    if (newTag.trim()) {
      onSuggestTag(image.id, newTag);
    }
  };

  // Ensure tags has the correct structure
  const safeTags = {
    approved: tags?.approved || [],
    suggestions: tags?.suggestions || []
  };

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content-new" onClick={(e) => e.stopPropagation()}>
        <button className="modal-close" onClick={onClose}>×</button>
        
        {/* Navigation Controls */}
        {totalImages > 1 && (
          <>
            <button 
              className="nav-button nav-prev"
              onClick={() => onNavigate('prev')}
              title="Previous image (←)"
            >
              ‹
            </button>
            <button 
              className="nav-button nav-next"
              onClick={() => onNavigate('next')}
              title="Next image (→)"
            >
              ›
            </button>
          </>
        )}
        
        {/* Image Counter */}
        {totalImages > 1 && (
          <div className="image-counter">
            {currentIndex + 1} / {totalImages}
          </div>
        )}
        
        <div className="modal-layout">
          {/* Left side - Image */}
          <div className="modal-image-container">
            <img 
              src={`/uploads/${image.filename}`} 
              alt={image.original_name}
              className="modal-image-large"
            />
          </div>
          
          {/* Right side - Info and Tags */}
          <div className="modal-sidebar">
            <div className="image-details">
              <h3>{image.original_name}</h3>
              <p><strong>Uploaded by:</strong> {image.uploaded_by}</p>
              <p><strong>Date:</strong> {new Date(image.uploaded_at).toLocaleString()}</p>
              <p><strong>Group:</strong> {groups.find(g => g.id === image.group_id)?.name || 'Unknown'}</p>
            </div>
            
            {/* Tag Suggestion Box - Only for non-admin users */}
            {user.role !== 'admin' && (
              <div className="tag-suggestion-box">
                <h4>Suggest a Tag</h4>
                <div className="tag-input-group-large">
                  <textarea
                    className="tag-textarea"
                    value={newTag}
                    onChange={(e) => setNewTag(e.target.value)}
                    placeholder="Enter a tag..."
                    rows={2}
                  />
                  <button 
                    className="login-button"
                    onClick={handleSuggestTag}
                    disabled={!newTag.trim()}
                  >
                    Suggest
                  </button>
                </div>
              </div>
            )}
            
            {/* Admin message */}
            {user.role === 'admin' && (
              <div className="admin-message">
                <h4>Admin View</h4>
                <p>As an admin, you can review and approve/reject tag suggestions, but cannot suggest new tags.</p>
              </div>
            )}
            
            {/* All Tags with Status */}
            <div className="all-tags-section">
              <h4>All Tags</h4>
              
              {/* Approved Tags */}
              {safeTags.approved.length > 0 && (
                <div className="tags-group">
                  <h5>✅ Approved</h5>
                  <div className="tag-list">
                    {safeTags.approved
                      .sort((a, b) => b.upvotes - a.upvotes)
                      .map((tag) => (
                      <div 
                        key={tag.id} 
                        className={`tag-item-minimal ${userUpvotes.has(tag.id) ? 'upvoted' : ''}`}
                        style={{ 
                          opacity: userUpvotes.has(tag.id) ? 0.7 : 1
                        }}
                      >
                        <div 
                          className="vote-count-minimal"
                          onClick={() => !userUpvotes.has(tag.id) && onUpvote(tag.id)}
                          title={userUpvotes.has(tag.id) ? 'Already upvoted' : 'Click to upvote'}
                        >
                          {tag.upvotes}
                        </div>
                        <span className="tag-text-minimal">{tag.tag}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Pending Suggestions */}
              {safeTags.suggestions.filter(s => s.status === 'pending').length > 0 && (
                <div className="tags-group">
                  <h5>⏳ Pending</h5>
                  <div className="tag-list">
                    {safeTags.suggestions
                      .filter(s => s.status === 'pending')
                      .map((suggestion) => (
                        <div key={suggestion.id} className="tag-item">
                          <span className="tag-text-minimal" title={`Suggested by ${suggestion.suggested_by}`}>
                            {suggestion.tag}
                          </span>
                          {user.role === 'admin' && (
                            <div className="tag-actions">
                              <button 
                                className="approve-button-small"
                                onClick={() => onReviewTag(suggestion.id, 'approved')}
                                title="Approve tag"
                              >
                                ✅
                              </button>
                              <button 
                                className="reject-button-small"
                                onClick={() => onReviewTag(suggestion.id, 'rejected')}
                                title="Reject tag"
                              >
                                ❌
                              </button>
                            </div>
                          )}
                        </div>
                      ))}
                  </div>
                </div>
              )}
              
              {/* Rejected Suggestions */}
              {safeTags.suggestions.filter(s => s.status === 'rejected').length > 0 && (
                <div className="tags-group">
                  <h5>❌ Rejected</h5>
                  <div className="tag-list">
                    {safeTags.suggestions
                      .filter(s => s.status === 'rejected')
                      .map((suggestion) => (
                        <div key={suggestion.id} className="tag-item-rejected">
                          <span className="tag-text-minimal" title={`Suggested by ${suggestion.suggested_by}`}>
                            {suggestion.tag}
                        </span>
                        </div>
                      ))}
                  </div>
                </div>
              )}
              
              {/* No tags message */}
              {safeTags.approved.length === 0 && safeTags.suggestions.length === 0 && (
                <div className="no-tags">
                  <p>No tags yet. Be the first to suggest one!</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Tags View Component (Admin only)
const TagsView: React.FC<{
  suggestions: TagSuggestion[];
  onReview: (suggestionId: string, status: 'approved' | 'rejected') => void;
  images: Image[];
  onImageClick: (image: Image) => void;
  groups: Group[];
}> = ({ suggestions, onReview, images, onImageClick, groups }) => {
  if (suggestions.length === 0) {
    return (
      <div className="empty-state">
        <h3>No Pending Suggestions</h3>
        <p>All tag suggestions have been reviewed.</p>
      </div>
    );
  }

  const getImageForSuggestion = (imageId: string) => {
    return images.find(img => img.id === imageId);
  };

  const getGroupForImage = (imageId: string) => {
    const image = images.find(img => img.id === imageId);
    if (!image) return null;
    return groups.find(group => group.id === image.group_id);
  };

  const getGroupColor = (groupName: string) => {
    const colors = [
      '#667eea', '#f093fb', '#4facfe', '#43e97b', 
      '#fa709a', '#ffecd2', '#a8edea', '#d299c2',
      '#ff9a9e', '#fecfef', '#fecfef', '#a8c0ff'
    ];
    const index = groupName.charCodeAt(0) % colors.length;
    return colors[index];
  };

  return (
    <div className="tags-view-minimal">
      <div className="suggestions-grid">
        {suggestions.map((suggestion) => {
          const image = getImageForSuggestion(suggestion.image_id);
          const group = getGroupForImage(suggestion.image_id);
          return (
            <div key={suggestion.id} className="suggestion-card-minimal">
              <div 
                className="suggestion-image-minimal"
                onClick={() => image && onImageClick(image)}
                style={{ cursor: image ? 'pointer' : 'default' }}
              >
                {image ? (
                  <>
                    <img 
                      src={`/uploads/${image.filename}`} 
                      alt={image.original_name}
                      className="suggestion-preview-minimal"
                    />
                    {group && (
                      <div 
                        className="group-badge"
                        style={{ backgroundColor: getGroupColor(group.name) }}
                        title={`Group: ${group.name}`}
                      >
                        {group.name}
                      </div>
                    )}
                  </>
                ) : (
                  <div className="no-image-minimal">?</div>
                )}
              </div>
              
              <div className="suggestion-content-minimal">
                <div className="tag-text-minimal">"{suggestion.tag}"</div>
                <div className="suggestion-meta-minimal">
                  by {suggestion.suggested_by}
                </div>
              </div>
              
              <div className="suggestion-actions-minimal">
                <button 
                  className="action-btn approve-minimal"
                  onClick={() => onReview(suggestion.id, 'approved')}
                  title="Approve"
                >
                  ✓
                </button>
                <button 
                  className="action-btn reject-minimal"
                  onClick={() => onReview(suggestion.id, 'rejected')}
                  title="Reject"
                >
                  ✗
                </button>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default App;
